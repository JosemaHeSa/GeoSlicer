from datetime import datetime
import os
import re

import pandas as pd
import lasio

from workflow.commons import DESCRIPTIVE_STATISTICS


class LASExporter:

    ## LASExporter: Geração de arquivos LAS descritores das propriedades do poço

    # Uma vez que todas as imagens do poço são processadas, arquivos LAS são criados separando suas
    # propriedades geológicas por profundidade e as resumindo em estatísticas descritivas. Um arquivo é
    # gerado para cada estatísica, dentre média, mediana, desvio padrão, mínimo e máximo. Tipos de
    # instâncias diferentes têm seu próprio conjunto de arquivos LAS.

    # A título de exemplo, se um poço têm três imagens, correspondentes às profundidades 2000, 2500 e
    # 3000 metros, e cada uma possui centenas de poros e oóides, será gerado um arquivo LAS contendo a
    # média das propriedades dos poros em cada um dos níveis de profundidade e um análogo para os
    # oóides. Isso será repetido para cada uma das estatísticas descritivas.

    def run(self, images_names, stats_sheet_prefix, output_dir, instance_type="pores"):
        def split_value_index_and_unit(depth_sentence):
            pattern = r"(\d*[.,]?\d+)(-?\d+)?([a-zA-Z]+)"
            match = re.match(pattern, depth_sentence)

            value = float(match.group(1))
            index = match.group(2)
            unit = match.group(3)

            return value, index, unit

        def export_las(df, descriptive_statistic, well_name, depth_unit, output_las_dir):
            def split_param_and_unit(curve_name):
                param = curve_name
                unit_pattern = r"\((.*?)\)"
                unit_match = re.search(unit_pattern, curve_name)
                if unit_match:
                    unit = unit_match.group(1)
                    param = param.replace(f"({unit})", "").strip()
                    return param, unit
                return param, ""

            def las_add_curve(las, param, curve, unit):
                # para lidar com diferentes versões da lasio
                try:
                    las.add_curve(param, curve, unit=unit)
                except:
                    las.append_curve(param, curve, unit=unit)
                return las

            las = lasio.LASFile()
            las.well.WELL = well_name
            las.well.DATE = datetime.today().strftime("%Y-%m-%d %H:%M:%S")
            las.other = "Generated by GeoSlicer"

            df = df.sort_values(by="depth")
            depths = df["depth"].copy()
            df = df.drop("depth", axis=1)

            las = las_add_curve(las, "DEPT", depths, unit=depth_unit)

            for name, curve in df.items():
                param, unit = split_param_and_unit(name)
                las = las_add_curve(las, param, curve.to_numpy(), unit=unit)

            las.write(os.path.join(output_las_dir, f"las_{descriptive_statistic}.las"), version=2)

        output_las_dir = os.path.join(output_dir, "LAS")
        os.makedirs(output_las_dir, exist_ok=True)

        well_name = None
        for descriptive_statistic in DESCRIPTIVE_STATISTICS.keys():
            grouped_data = pd.DataFrame([])
            for image_name in images_names:
                image_info = image_name.split("_")
                assert (
                    well_name is None or image_info[0] == well_name
                ), f"Images are describing different wells in the same set (previous: {well_name}; current: {image_info[0]})"
                well_name = image_info[0]
                depth, _, unit = split_value_index_and_unit(image_info[1])

                df = pd.read_excel(
                    os.path.join(output_dir, image_name, f"{stats_sheet_prefix}_{image_name}_{instance_type}.xlsx")
                )

                count = len(df)
                row = getattr(df, descriptive_statistic)() if not df.empty else pd.Series(0, index=df.columns)
                row["depth"] = depth
                row["count"] = int(count)

                grouped_data = pd.concat([grouped_data, row.to_frame().T], ignore_index=True)

            export_las(
                grouped_data[["depth", "count"] + list(grouped_data.drop(["depth", "count"], axis=1).columns)],
                descriptive_statistic,
                well_name,
                unit,
                output_las_dir,
            )
