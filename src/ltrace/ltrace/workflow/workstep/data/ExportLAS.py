import os
import re
import ctk
import qt
import slicer
import lasio
import pandas as pd
from datetime import datetime
from ltrace.workflow.workstep import Workstep, WorkstepWidget
from ltrace.algorithms.measurements import LabelStatistics2D


class ExportLAS(Workstep):
    NAME = "Data: Export LAS"

    INPUT_TYPES = (slicer.vtkMRMLLabelMapVolumeNode,)
    OUTPUT_TYPE = type(None)

    def __init__(self):
        super().__init__()

    def defaultValues(self):
        self.exportPath = os.path.abspath(datetime.now().strftime("%Y%m%d_%H%M%S.las"))

    def run(self, nodes):
        def export_las(df):
            def split_param_and_unit(curve_name):
                param = curve_name
                unit_pattern = r"\((.*?)\)"
                unit_match = re.search(unit_pattern, curve_name)
                if unit_match:
                    unit = unit_match.group(1)
                    param = param.replace(f"({unit})", "").strip()
                    return param, unit
                return param, ""

            las = lasio.LASFile()
            las.well.DATE = datetime.today().strftime("%Y-%m-%d %H:%M:%S")
            las.other = "Generated by GeoSlicer"

            df = df.sort_values(by="depth")
            depths = df["depth"].copy()
            df = df.drop("depth", axis=1)

            las.append_curve("DEPT", depths, unit="m")

            for name, curve in df.items():
                param, unit = split_param_and_unit(name)
                las.append_curve(param, curve.to_numpy(), unit=unit)

            las.write(self.exportPath, version=2)

        grouped_data = pd.DataFrame([])
        unnecessary_attrs = ["label", "voxelCount", "pore_size_class"]
        empty_depths = []

        for node in nodes:
            depth = float(node.GetName().split("_")[1].replace("-2", "")[:-1].replace(",", "."))
            reportID = node.GetAttribute("ResultReport")
            if reportID:
                reportNode = slicer.mrmlScene.GetNodeByID(node.GetAttribute("ResultReport"))
                df = slicer.util.dataframeFromTable(reportNode)
                df = df.drop(unnecessary_attrs, axis=1).mean()
                df["depth"] = depth

                grouped_data = pd.concat([grouped_data, df.to_frame().T], ignore_index=True)
            else:
                empty_depths.append(depth)

            yield node

        if len(empty_depths) > 0:
            if not grouped_data.empty:
                df_columns = grouped_data.columns
            else:
                df_columns = [attr for attr in LabelStatistics2D.ATTRIBUTES if attr not in unnecessary_attrs] + [
                    "depth"
                ]
            empty_data = pd.DataFrame(0, index=range(len(empty_depths)), columns=df_columns)
            empty_data["depth"] = empty_depths
            grouped_data = pd.concat([grouped_data, empty_data], ignore_index=True)

        export_las(grouped_data[["depth"] + list(grouped_data.columns)[:-1]])

    def widget(self):
        return ExportLASWidget(self)


class ExportLASWidget(WorkstepWidget):
    def __init__(self, workstep):
        WorkstepWidget.__init__(self, workstep)

    def setup(self):
        WorkstepWidget.setup(self)

        self.formLayout = qt.QFormLayout()
        self.formLayout.setLabelAlignment(qt.Qt.AlignRight)
        self.layout().addLayout(self.formLayout)

        self.exportPathFileSelector = ctk.ctkPathLineEdit()
        self.exportPathFileSelector.filters = ctk.ctkPathLineEdit.Files | ctk.ctkPathLineEdit.Writable
        self.exportPathFileSelector.nameFilters = ["LAS files (*.las)"]
        self.exportPathFileSelector.setCurrentPath("")

        self.formLayout.addRow("Export path:", self.exportPathFileSelector)

    def save(self):
        self.workstep.exportPath = self.exportPathFileSelector.currentPath

    def load(self):
        self.exportPathFileSelector.currentPath = self.workstep.exportPath
